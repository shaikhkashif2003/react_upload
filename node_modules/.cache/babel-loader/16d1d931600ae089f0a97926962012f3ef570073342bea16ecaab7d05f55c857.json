{"ast":null,"code":"import{useState}from'react';import'./App.css';import About from'./components/About';import Navbar from'./components/Navbar';import TextForm from'./components/TextForm';import Alert from'./components/Alert';import{createBrowserRouter,RouterProvider,Outlet}from\"react-router-dom\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[mode,setMode]=useState('light');// whether dark mode is enable or not \nconst[alert,setAlert]=useState(null);// Alert to show dark mode is enabled \nconst showAlert=(message,type)=>{setAlert({msg:message,type:type});setTimeout(()=>{//set timer to disable the alert\nsetAlert(null);},1500);};const toggleMode=()=>{if(mode==='light'){setMode('dark');document.body.style.backgroundColor='#042743';showAlert(\"Dark mode enabled\",\"success\");document.title='TextUtils - Dark Mode';//Displaying message on title of web page\n}else{setMode('light');document.body.style.backgroundColor='white';showAlert(\"Light mode enabled\",\"success\");document.title='TextUtils - Light Mode';}};const router=createBrowserRouter([{path:'/',element:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{title:\"Textutils\",about:\"About\",mode:mode,toggleMode:toggleMode}),/*#__PURE__*/_jsx(Outlet,{})]}),children:[{path:\"TextForm\",element:/*#__PURE__*/_jsx(TextForm,{showAlert:showAlert,heading:\"Enter the text to analyse below\",mode:mode})},{path:\"About\",element:/*#__PURE__*/_jsx(About,{})}]}]);return/*#__PURE__*/ (// '<>' jxs fragment is used while there are multiple components\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(RouterProvider,{router:router}),/*#__PURE__*/_jsx(Alert,{alert:alert})]}));}export default App;","map":{"version":3,"names":["useState","About","Navbar","TextForm","Alert","createBrowserRouter","RouterProvider","Outlet","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","mode","setMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","title","router","path","element","children","about","heading"],"sources":["C:/project/project/src/App.js"],"sourcesContent":["\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {createBrowserRouter,RouterProvider,Outlet} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');  // whether dark mode is enable or not \n  const [alert, setAlert] = useState(null);   // Alert to show dark mode is enabled \n  \n  const showAlert=(message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{     //set timer to disable the alert\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode=() =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode enabled\", \"success\")\n      document.title='TextUtils - Dark Mode';    //Displaying message on title of web page\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode enabled\", \"success\")\n      document.title='TextUtils - Light Mode';\n    }\n  }\n\n  \n  const router = createBrowserRouter([\n    {\n      path: '/',\n      element: (\n        <>\n          <Navbar title=\"Textutils\" about='About' mode={mode} toggleMode={toggleMode} />\n          {/* <Alert alert={alert} /> */}\n          <Outlet />\n        </>\n      ),\n      children: [\n        {\n          path: \"TextForm\",\n          element: <TextForm showAlert={showAlert} heading=\"Enter the text to analyse below\" mode={mode} />,\n        },\n        {\n          path: \"About\",\n          element: <About />,\n        },\n      ],\n    },\n  ]);\n\n  return (\n    // '<>' jxs fragment is used while there are multiple components\n    <>\n    {/* <Navbar  /> */}\n    \n    {/* <Navbar title=\"Textutils\" about='About' mode={mode} toggleMode={toggleMode} /> */}\n\n    <RouterProvider router={router} />\n    <Alert alert={alert} />\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"AACA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,WAAW,CAClB,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,OAAQC,mBAAmB,CAACC,cAAc,CAACC,MAAM,KAAO,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3E,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGhB,QAAQ,CAAC,OAAO,CAAC,CAAG;AAC5C,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAI;AAE5C,KAAM,CAAAmB,SAAS,CAACA,CAACC,OAAO,CAAEC,IAAI,GAAI,CAChCH,QAAQ,CAAC,CACPI,GAAG,CAAEF,OAAO,CACZC,IAAI,CAAEA,IACR,CAAC,CAAC,CACFE,UAAU,CAAC,IAAI,CAAM;AACnBL,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED,KAAM,CAAAM,UAAU,CAACA,CAAA,GAAK,CACpB,GAAGT,IAAI,GAAK,OAAO,CAAC,CAClBC,OAAO,CAAC,MAAM,CAAC,CACfS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,CAAG,SAAS,CAC/CT,SAAS,CAAC,mBAAmB,CAAE,SAAS,CAAC,CACzCM,QAAQ,CAACI,KAAK,CAAC,uBAAuB,CAAK;AAC7C,CAAC,IAAI,CACHb,OAAO,CAAC,OAAO,CAAC,CAChBS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,CAAG,OAAO,CAC7CT,SAAS,CAAC,oBAAoB,CAAE,SAAS,CAAC,CAC1CM,QAAQ,CAACI,KAAK,CAAC,wBAAwB,CACzC,CACF,CAAC,CAGD,KAAM,CAAAC,MAAM,CAAGzB,mBAAmB,CAAC,CACjC,CACE0B,IAAI,CAAE,GAAG,CACTC,OAAO,cACLnB,KAAA,CAAAF,SAAA,EAAAsB,QAAA,eACExB,IAAA,CAACP,MAAM,EAAC2B,KAAK,CAAC,WAAW,CAACK,KAAK,CAAC,OAAO,CAACnB,IAAI,CAAEA,IAAK,CAACS,UAAU,CAAEA,UAAW,CAAE,CAAC,cAE9Ef,IAAA,CAACF,MAAM,GAAE,CAAC,EACV,CACH,CACD0B,QAAQ,CAAE,CACR,CACEF,IAAI,CAAE,UAAU,CAChBC,OAAO,cAAEvB,IAAA,CAACN,QAAQ,EAACgB,SAAS,CAAEA,SAAU,CAACgB,OAAO,CAAC,iCAAiC,CAACpB,IAAI,CAAEA,IAAK,CAAE,CAClG,CAAC,CACD,CACEgB,IAAI,CAAE,OAAO,CACbC,OAAO,cAAEvB,IAAA,CAACR,KAAK,GAAE,CACnB,CAAC,CAEL,CAAC,CACF,CAAC,CAEF,oBACE;AACAY,KAAA,CAAAF,SAAA,EAAAsB,QAAA,eAKAxB,IAAA,CAACH,cAAc,EAACwB,MAAM,CAAEA,MAAO,CAAE,CAAC,cAClCrB,IAAA,CAACL,KAAK,EAACa,KAAK,CAAEA,KAAM,CAAE,CAAC,EAErB,CAAC,EAEP,CAEA,cAAe,CAAAH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}